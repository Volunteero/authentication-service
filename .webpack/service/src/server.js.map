{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/models/user.js","webpack:///external \"mongoose\"","webpack:///external \"express\"","webpack:///external \"dotenv\"","webpack:///./src/middleware/generic-error-handler.js","webpack:///./src/middleware/bad-input-error-handler.js","webpack:///./src/controllers/auth/input-validation-schema.js","webpack:///external \"express-jsonschema\"","webpack:///./src/controllers/auth/register/controller.js","webpack:///external \"util\"","webpack:///external \"jsonwebtoken\"","webpack:///./src/controllers/auth/login/controller.js","webpack:///./src/controllers/auth/router.js","webpack:///./src/route.js","webpack:///external \"express-async-errors\"","webpack:///external \"express-pino-logger\"","webpack:///external \"express-sanitizer\"","webpack:///external \"cookie-parser\"","webpack:///external \"body-parser\"","webpack:///./src/app.js","webpack:///external \"aws-serverless-express\"","webpack:///./src/server.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","mongoose","schema","Schema","username","type","String","index","password","loginAttempts","Number","default","loginLockExpiry","model","require","app","use","err","req","res","next","log","error","errorCode","stack","status","json","serverError","code","message","errors","validations","properties","required","minLength","pattern","additionalProperties","User","register","async","body","findOne","info","newUser","save","success","config","jwt","isNumber","privateKey","process","env","PRIVATE_KEY","login","user","loginAttemptLock","Date","now","newLoginLockExpiry","update","accessToken","sign","Buffer","from","algorithm","expiresIn","cookie","signed","secret","express","loginController","registerController","validate","Router","post","authRouter","bodyParser","cookieParser","expressSanitizer","pino","connect","route","handleBadInputError","handleGenericError","urlencoded","extended","awsServerlessExpress","createServer","handler","event","context","callback","statusCode","JSON","stringify","hey"],"mappings":"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","file":"src/server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","const mongoose = require('mongoose');\r\nconst schema = mongoose.Schema({\r\n\tusername: { type: String, index: true },\r\n\tpassword: String,\r\n\tloginAttempts: { type: Number, default: 0 },\r\n\tloginLockExpiry: Number,\r\n});\r\nmodule.exports = mongoose.model('User', schema);\r\n","module.exports = require(\"mongoose\");","module.exports = require(\"express\");","module.exports = require(\"dotenv\");","module.exports = app => {\r\n\tapp.use(function(err, req, res, next) {\r\n\t\treq.log.error({\r\n\t\t\terrorCode: `ServerError:${err.name}`,\r\n\t\t\tstack: err.stack,\r\n\t\t});\r\n\t\treturn res.status(500).json({\r\n\t\t\tserverError: true,\r\n\t\t});\r\n\t});\r\n};\r\n","module.exports = app => {\r\n\tapp.use(function(err, req, res, next) {\r\n\t\tif (err.name === 'JsonSchemaValidation') {\r\n\t\t\tres.status(400).json({\r\n\t\t\t\tcode: 'BadParameterException',\r\n\t\t\t\tmessage:\r\n\t\t\t\t\t'There are some missing or invalid parameters in the reuqest',\r\n\t\t\t\terrors: err.validations,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// pass error to next error middleware handler\r\n\t\t\tnext(err);\r\n\t\t}\r\n\t});\r\n};\r\n","module.exports = {\r\n\ttype: 'object',\r\n\tproperties: {\r\n\t\tusername: {\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tpassword: {\r\n\t\t\ttype: 'string',\r\n\t\t\trequired: true,\r\n\t\t\tminLength: 6,\r\n\t\t\tpattern:\r\n\t\t\t\t'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})',\r\n\t\t},\r\n\t},\r\n\tadditionalProperties: false,\r\n};\r\n","module.exports = require(\"express-jsonschema\");","const User = require('../../../models/user');\r\n// const bcrypt = require('bcrypt');\r\n\r\nmodule.exports.register = async (req, res) => {\r\n\tconst { password, username } = req.body;\r\n\r\n\t// Check if there is such a user\r\n\tconst user = await User.findOne({ username });\r\n\tif (user !== null) {\r\n\t\t// User already exsists\r\n\t\tconst errorCode = 'UserExists';\r\n\t\treq.log.info({ errorCode, username });\r\n\t\treturn res.status(409).json({\r\n\t\t\terrorCode,\r\n\t\t\tmessage: 'Username exists',\r\n\t\t});\r\n\t}\r\n\r\n\t// Create new user\r\n\tlet newUser = new User({\r\n\t\t// password: await bcrypt.hash(password, 10),\r\n\t\tpassword,\r\n\t\tusername,\r\n\t});\r\n\r\n\t// Save in DB\r\n\tconst result = await newUser.save();\r\n\r\n\t// Send the response\r\n\tres.status(201).json({\r\n\t\tsuccess: true,\r\n\t});\r\n};\r\n","module.exports = require(\"util\");","module.exports = require(\"jsonwebtoken\");","require('dotenv').config();\r\nconst User = require('../../../models/user');\r\n// const bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst { isNumber } = require('util');\r\nconst privateKey = process.env.PRIVATE_KEY;\r\n\r\nmodule.exports.login = async (req, res) => {\r\n\tconst { password, username } = req.body;\r\n\r\n\t// Check if there is such a user\r\n\tconst user = await User.findOne({ username });\r\n\tif (user === null) {\r\n\t\t// No such user found\r\n\t\tconst errorCode = 'UserNotFound';\r\n\t\treq.log.info({ errorCode, username });\r\n\t\treturn res.status(404).json({\r\n\t\t\terrorCode,\r\n\t\t\tmessage: 'User not found',\r\n\t\t});\r\n\t}\r\n\r\n\t// Control login attempts\r\n\tconst { loginAttempts, loginLockExpiry } = user;\r\n\tlet loginAttemptLock = false;\r\n\t// If we have a lock wait until the time is over\r\n\tif (loginLockExpiry > Date.now()) {\r\n\t\tloginAttemptLock = true;\r\n\t}\r\n\t// If there is no lock, check how many login attempts have been made\r\n\tif (loginAttempts >= 5 && !loginAttemptLock) {\r\n\t\t// After 5 attempts we put a new 5 minute lock\r\n\t\t// and reset the login attempts\r\n\t\tconst newLoginLockExpiry = Date.now() + 5 * 60 * 1000;\r\n\t\tawait user.update({\r\n\t\t\tloginAttempts: 0,\r\n\t\t\tloginLockExpiry: newLoginLockExpiry,\r\n\t\t});\r\n\t\tloginAttemptLock = true;\r\n\t}\r\n\t// If there is a lock, show the message\r\n\tif (loginAttemptLock) {\r\n\t\tconst errorCode = 'LoginAttemptsExceeded';\r\n\t\treq.log.info({ errorCode, username });\r\n\t\treturn res.status(401).json({\r\n\t\t\terrorCode,\r\n\t\t\tmessage:\r\n\t\t\t\t'You have used a wrong password more than 5 times. Try again in a few minutes',\r\n\t\t});\r\n\t}\r\n\r\n\t// Validate password\r\n\t// const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\tconst isPasswordValid = true;\r\n\tif (!isPasswordValid) {\r\n\t\t// Password invalid\r\n\t\tconst errorCode = 'PasswordIncorrect';\r\n\t\treq.log.info({ errorCode, username });\r\n\t\t// When password is incorrect increase login attempts\r\n\t\tawait user.update({ loginAttempts: loginAttempts + 1 });\r\n\t\treturn res.status(401).json({\r\n\t\t\terrorCode,\r\n\t\t\tmessage: 'Incorrect password',\r\n\t\t});\r\n\t}\r\n\r\n\t// Password valid - set cookie with token\r\n\tconst accessToken = jwt.sign(\r\n\t\t{ username },\r\n\t\tBuffer.from(privateKey, 'base64'),\r\n\t\t{ algorithm: 'RS256', expiresIn: '10m' },\r\n\t);\r\n\r\n\t// Also reset login attempts\r\n\tawait user.update({ loginAttempts: 0 });\r\n\r\n\t// Store the token in a cookie\r\n\tres.cookie('accessToken', accessToken, {\r\n\t\tsigned: true,\r\n\t\t// secure: true, // only HTTPS\r\n\t\tsecret: process.env.PRIVATE_KEY,\r\n\t});\r\n\t// Send the response\r\n\treturn res.status(200).json({\r\n\t\tsuccess: true,\r\n\t});\r\n};\r\n","const express = require('express');\r\nconst loginController = require('./login/controller');\r\nconst registerController = require('./register/controller');\r\nconst validate = require('express-jsonschema').validate;\r\nconst schema = require('./input-validation-schema');\r\nmodule.exports = express\r\n\t.Router()\r\n\t.post('/login', validate({ body: schema }), loginController.login)\r\n\t.post(\r\n\t\t'/register',\r\n\t\tvalidate({ body: schema }),\r\n\t\tregisterController.register,\r\n\t);\r\n","const authRouter = require('./controllers/auth/router');\r\n\r\nmodule.exports = app => {\r\n\tapp.use('/auth', authRouter);\r\n};\r\n","module.exports = require(\"express-async-errors\");","module.exports = require(\"express-pino-logger\");","module.exports = require(\"express-sanitizer\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"body-parser\");","require('dotenv').config();\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst cookieParser = require('cookie-parser');\r\nconst expressSanitizer = require('express-sanitizer');\r\nconst mongoose = require('mongoose');\r\nconst pino = require('express-pino-logger')();\r\n\r\nrequire('express-async-errors');\r\n\r\nmongoose.connect(\r\n\t'mongodb://SePr-Group10:yKsst98NHg0vR9Bv@sepr-group10-shard-00-00-10se6.mongodb.net:27017,sepr-group10-shard-00-01-10se6.mongodb.net:27017,sepr-group10-shard-00-02-10se6.mongodb.net:27017/sepr?ssl=true&replicaSet=SePr-Group10-shard-0&authSource=admin',\r\n);\r\n\r\nconst route = require('./route');\r\nconst handleBadInputError = require('./middleware/bad-input-error-handler');\r\nconst handleGenericError = require('./middleware/generic-error-handler');\r\n\r\nconst app = express();\r\n\r\napp.use(pino);\r\napp.use(cookieParser(process.env.PRIVATE_KEY));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(expressSanitizer());\r\n\r\nroute(app);\r\n\r\nhandleBadInputError(app);\r\nhandleGenericError(app);\r\n\r\nmodule.exports = app;\r\n","module.exports = require(\"aws-serverless-express\");","'use strict';\r\nconst awsServerlessExpress = require('aws-serverless-express');\r\nconst app = require('./app');\r\nconst server = awsServerlessExpress.createServer(app);\r\n\r\nexports.handler = (event, context, callback) => {\r\n\tcallback(null, {\r\n\t\tstatusCode: 200,\r\n\t\tbody: JSON.stringify({ hey: true }),\r\n\t});\r\n\t// awsServerlessExpress.proxy(server, event, context);\r\n};\r\n"],"sourceRoot":""}